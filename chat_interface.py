import streamlit as st
from config import MODEL

def generate_google_ads_response(prompt, df):
    """Gera resposta do Gemini para an√°lise de Google Ads"""
    try:
        # Prepara o contexto para o Gemini
        context = f"""
        Voc√™ √© um especialista em Google Ads analisando um relat√≥rio de campanhas. 
        Aqui est√° uma amostra dos dados:
        {df.to_string()}
        
        Colunas dispon√≠veis: {', '.join(df.columns)}
        """
        
        # Adiciona m√©tricas principais se dispon√≠veis
        metrics_info = []
        if 'Cost' in df.columns:
            metrics_info.append(f"- Total gasto: R$ {df['Cost'].sum():,.2f}")
        if 'Impr.' in df.columns or 'Impressions' in df.columns:
            col = 'Impr.' if 'Impr.' in df.columns else 'Impressions'
            metrics_info.append(f"- Total de impress√µes: {df[col].sum():,.0f}")
        if 'Clicks' in df.columns:
            metrics_info.append(f"- Total de cliques: {df['Clicks'].sum():,.0f}")
        if ('Impr.' in df.columns or 'Impressions' in df.columns) and 'Clicks' in df.columns:
            impressions_col = 'Impr.' if 'Impr.' in df.columns else 'Impressions'
            total_impressions = df[impressions_col].sum()
            if total_impressions > 0:
                ctr = (df['Clicks'].sum() / total_impressions) * 100
                metrics_info.append(f"- CTR m√©dio: {ctr:.2f}%")
        
        if metrics_info:
            context += "\nM√©tricas principais:\n" + "\n".join(metrics_info)
        
        context += f"""
        Pergunta: {prompt}
        
        Responda de forma t√©cnica, focando em m√©tricas de performance, efici√™ncia de custo e sugest√µes de otimiza√ß√£o.
        Inclua n√∫meros espec√≠ficos quando relevante. Tire insights sobre as m√©tricas. Retorne os nomes das campanhas que est√£o abaixo ou acima das m√©dias das colunas num√©ricas.
        Me traga insights t√©cnicos sobre a performance das campanhas. Gere um relat√≥rio sobre as campanhas.
        """
        
        response = MODEL.generate_content(context)
        return response.text
    except Exception as e:
        return f"Erro ao gerar resposta: {str(e)}"

def chat_interface():
    """Interface do chatbot"""
    st.subheader("üí¨ Chatbot de An√°lise de Google Ads")
    
    # Exibir hist√≥rico do chat
    for message in st.session_state.chat_history:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    # Input do usu√°rio
    if prompt := st.chat_input("Fa√ßa sua pergunta sobre os dados do Google Ads..."):
        # Adicionar mensagem do usu√°rio ao hist√≥rico
        st.session_state.chat_history.append({"role": "user", "content": prompt})
        
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Gerar resposta
        with st.spinner("Analisando..."):
            if st.session_state.df_clean is None:
                response = "Por favor, carregue um relat√≥rio do Google Ads primeiro."
            else:
                response = generate_google_ads_response(prompt, st.session_state.df_clean)
            
            # Adicionar resposta ao hist√≥rico
            st.session_state.chat_history.append({"role": "assistant", "content": response})
            
            with st.chat_message("assistant"):
                st.markdown(response)
        
        st.rerun()
